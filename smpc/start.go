/*
 *  Copyright (C) 2020-2021  AnySwap Ltd. All rights reserved.
 *  Copyright (C) 2020-2021  haijun.cai@anyswap.exchange
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the Apache License, Version 2.0.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package smpc

import (
	p2psmpc "github.com/anyswap/FastMulThreshold-DSA/p2p/layer2"
	smpclibec2 "github.com/anyswap/FastMulThreshold-DSA/tss-lib/ec2"
	"github.com/fsn-dev/cryptoCoins/coins"
	cryptocoinsconfig "github.com/fsn-dev/cryptoCoins/coins/config"
	"github.com/fsn-dev/cryptoCoins/coins/eos"
	"os"
	"github.com/anyswap/FastMulThreshold-DSA/p2p/discover"
	"time"
	"encoding/json"
	tss "github.com/anyswap/FastMulThreshold-DSA/smpc/tss/smpc"
	"net"
	"io"
	"github.com/anyswap/FastMulThreshold-DSA/smpc/socket"
	"github.com/anyswap/FastMulThreshold-DSA/log"
)

var (
	curEnode    string
	initTimes   = 0
	recalcTimes = 1

	// KeyFile bootnode keyfile
	KeyFile      string
	
	RelayInPeers      bool

	Tee      bool
	TeeIP      string
	TeePort      string
)

func init() {
	p2psmpc.RegisterRecvCallback(Call2)
	p2psmpc.SdkProtocol_registerBroadcastInGroupCallback(Call)
	p2psmpc.RegisterCallback(Call)

	RegP2pGetGroupCallBack(p2psmpc.SdkProtocol_getGroup)
	RegP2pSendToGroupAllNodesCallBack(p2psmpc.SdkProtocol_SendToGroupAllNodes)
	RegP2pGetSelfEnodeCallBack(p2psmpc.GetSelfID)
	RegP2pBroadcastInGroupOthersCallBack(p2psmpc.SdkProtocol_broadcastInGroupOthers)
	RegP2pSendMsgToPeerCallBack(p2psmpc.SendMsgToPeer)
	RegP2pParseNodeCallBack(p2psmpc.ParseNodeID)
	RegSmpcGetEosAccountCallBack(eos.GetEosAccount)
	InitChan()
}

//------------------------------------------------------------------------

// LunchParams lunch params
type LunchParams struct {
	WaitMsg      uint64
	TryTimes     uint64
	PreSignNum   uint64
	Jobs   uint64
	MaxAcceptTime    uint64
	Bip32Pre     uint64
	SyncPreSign string
	RelayInPeers bool
	AutoPreSign bool
	TestNet bool
	NeighRelay bool
	Tee bool
	TeeIP string
	TeePort string
}

// Start init gsmpc
// 1. Initialization: local database (including general database, private key database, bip32 c value database,bip32 pre-sign data database, pre-sign data database, public key group information database, database for saving data related to generate pubkey command, database for saving data related to signature command, database for saving data related to resare command, pubkey), P2P callback function, Crypto coins configuration, startup parameters (including the number of pre generated packets, the timeout waiting for P2P information, the number of automatic retries after failed address application or signature, the timeout agreed by the nodes, whether to synchronize pre generated packets between nodes, etc.), and the enodeid of the local node.
// 2. Load the pubkeys generated by history and execute it only once.
// 3. Generate 4 large prime numbers
// 4. Execute automatic pre generation of data packets.
// 5. Listen for the arrival of the sign command.
// 6. Delete the data related to generating pubkey command, the signature command and the restore command from the corresponding sub database, and correspondingly change the status of the command data to timeout in the general database.
func Start(params *LunchParams) {

	cryptocoinsconfig.Init()
	coins.Init()

	curEnode = p2psmpc.GetSelfID()
	accloaded := AccountLoaded()

	go smpclibec2.GenRandomSafePrime()

	log.Debug("======================smpc.Start======================", "accounts loaded", accloaded, "cache", cache, "handles", handles, "cur enode", curEnode)
	err := StartSmpcLocalDb()
	if err != nil {
		info := "======================smpc.Start," + err.Error() + ",so terminate smpc node startup"
		log.Error(info)
		os.Exit(1)
		return
	}

	//get p2p group db
	err = discover.GetSmpcGidDb(curEnode)
	if err != nil {
		info := "======================smpc.Start," + err.Error() + ",so terminate smpc node startup"
		log.Error(info)
		os.Exit(1)
	}
	//

	log.Debug("======================smpc.Start,open all db success======================", "curEnode", curEnode)

	PrePubDataCount = int(params.PreSignNum)
	WaitMsgTimeGG20 = int(params.WaitMsg)
	recalcTimes = int(params.TryTimes)
	waitallgg20 = WaitMsgTimeGG20 * recalcTimes
	MaxAcceptTime = int(params.MaxAcceptTime)
	PreBip32DataCount = int(params.Bip32Pre)
	if params.SyncPreSign == "true" {
		syncpresign = true
	} else {
		syncpresign = false
	}

	if params.AutoPreSign {
	    AutoPreGenSignData()
	}

	go HandleRPCSign()

	// do this must after openning accounts db success,but get accloaded must before it
	if !accloaded {
		go CopyAllAccountsFromDb()
	}

	CleanUpAllReqAddrInfo()
	CleanUpAllSignInfo()
	CleanUpAllReshareInfo()

	InitMpcNodeInfo()

	RelayInPeers = params.RelayInPeers
	discover.NeighRelay = params.NeighRelay

	RPCMaxWorker = int(params.Jobs)
	RPCMaxQueue = int(params.Jobs)

	go CleanUpMsgReceiv()

	Tee = params.Tee
	TeeIP = params.TeeIP
	TeePort = params.TeePort

	if Tee {
	    go TeeClient(TeeIP,TeePort)
	}

	log.Info("================================smpc.Start,init finish.========================", "curEnode", curEnode, "waitmsg", WaitMsgTimeGG20, "trytimes", recalcTimes,"presignnum", PrePubDataCount, "bip32pre", PreBip32DataCount)
}

func TeeClient(teeip string,teeport string) {
    if teeip == "" || teeport == "" {
	return
    }

    addr := teeip + ":" + teeport
    socket.ServerAddress = addr
    
    for true {
	conn, err := net.Dial(socket.ServerNetworkType,socket.ServerAddress)
	if err != nil {
	    time.Sleep(time.Duration(1000000))
	   continue 
	}
       
	tss.VSocketConnect = conn

	for true {
	    msg, err := socket.Read(conn)
	    log.Info("=================socket client,finish reading msg================","msg",msg,"err",err)
	    if err != nil {
		if err == io.EOF {
		    log.Error("socket client,connection closed", "addr",conn.RemoteAddr())
		    break
		} else {
		    log.Error("socket client read error", "err",err)
		    time.Sleep(time.Duration(1000000))
		    continue
		}
	    }
	    
	    ////////
	    if msg == "" {
		log.Error("==============socket client,recieved msg from server fail===============")
		time.Sleep(time.Duration(1000000))
		continue
	    }

	    msgmap := make(map[string]string)
	    err = json.Unmarshal([]byte(msg), &msgmap)
	    log.Info("===============socket client,unmarshal msg to map finish=============","err",err,"msg",msg)
	    if err != nil {
		log.Error("===============socket client,unmarshal msg to map error=============","err",err)
		time.Sleep(time.Duration(1000000))
		continue
	    }
	   
	    w,err := FindWorker(msgmap["Key"])
	    log.Info("===============socket client,found worker finish=============","err",err,"key",msgmap["Key"])
	    if w == nil || err != nil {
		log.Error("==============socket client,not found worker================")
		time.Sleep(time.Duration(1000000))
		continue
	    }

	    log.Info("==============socket client,continue the msg================","msg",msg)
	    w.OutCh <-msg
	    ///////
	}
    }
}


